import keras
from keras.models import Sequential
from keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPooling2D
from skimage.transform import resize
from sklearn.model_selection import train_test_split
import numpy as np
import array
import imageio
import os

# prepare data
# read and load data
benign_folder = "Python/project/malware detection with cnn/data/benign"
malware_folder = "Python/project/malware detection with cnn/data/malware"

benign_images = []
malware_images = []

for filename in os.listdir(benign_folder):
    if filename.endswith(".png"):
        img_path = os.path.join(benign_folder, filename)
        img = imageio.imread(img_path)
        benign_images.append(img)

for filename in os.listdir(malware_folder):
    if filename.endswith(".png"):
        img_path = os.path.join(malware_folder, filename)
        img = imageio.imread(img_path)
        malware_images.append(img)

# reshape image
target_size = (256, 256)
benign_resized = [resize(img, target_size) for img in benign_images]
malware_resized = [resize(img, target_size) for img in malware_images]

# nomalize pixel about [0, 1]
benign_resized = [img / 255.0 for img in benign_resized]
malware_resized = [img / 255.0 for img in malware_resized]

# add label, 1 for malware, 0 for benign
benign_labels = [0] * len(benign_resized)
malware_labels = [1] * len(malware_resized)

# divide data to train dataset and test dataset
all_images = benign_resized + malware_resized
all_labels = benign_labels + malware_labels

train_images, test_images, train_labels, test_labels = train_test_split(
    all_images, all_labels, test_size=0.2, random_state=42)

input_shape = (256, 256, 3)  # kich thuoc anh dau vao: 256x256 3gam mau RBG
num_classes = 2  # so lop dau ra

# tao moddel
model = Sequential()
model.add(Conv2D(32, kernel_size=(3, 3),
          activation='relu', input_shape=input_shape))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Flatten())  # lam phang 3D -> 1D

# tranh overfitting
model.add(Dense(128, activation='relu'))
model.add(Dropout(0.5))

model.add(Dense(num_classes, activation='softmax'))

model.compile(loss='sparse_categorical_crossentropy',
              optimizer='adam', metrics=['accuracy'])

train_images = train_images.reshape(
    train_images.shape[0], 256, 256, 3).astype('float32') / 255
test_images = test_images.reshape(
    test_images.shape[0], 256, 256, 3).astype('float32') / 255

# Huấn luyện mô hình
epochs = 10  # Số lần lặp lại (epochs) trong quá trình huấn luyện
batch_size = 32  # Kích thước batch

# Huấn luyện mô hình
model.fit(train_images, train_labels, batch_size=batch_size,
          epochs=epochs, validation_data=(test_images, test_labels))

# Đánh giá mô hình trên tập kiểm tra
loss, accuracy = model.evaluate(test_images, test_labels, verbose=1)

# In ra kết quả
print(f"Loss on test data: {loss}")
print(f"Accuracy on test data: {accuracy}")
